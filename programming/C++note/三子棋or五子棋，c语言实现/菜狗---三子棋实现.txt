        #######################################################python进度条实现#########################################################


# 导入 alive-progress 库
from alive_progress import alive_bar
import time
# 使用 with 语句创建一个进度条
with alive_bar(100) as bar:  
    # 给 alive_bar 传入进度条总数目（这里是 100）
    for item in range(100):
        # 更新进度条，进度 +1
        bar()
        # 等待 1s
        time.sleep(.06)             




            #######################################################game1.h################################################################

//五子棋由于输赢判断的局限性和下棋实现的不便就没有完成。
#define ROW 3
#define COL 3

#define FIVE_X 16
#define FIVE_Y 16

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

//空格宫格
void InitBoard3(char board[ROW][COL], int row, int col);
void InitBoard5(char board[FIVE_X][FIVE_Y], int row, int col);


//棋盘打印（初始化）
void DisplayBoard3(char board[ROW][COL], int row, int col);
void DisplayBoard5(char board[FIVE_X][FIVE_Y], int row, int col);


//下棋实现
void PlayerMove(char board[ROW][COL], int row, int col);
void Player2Move(char board[ROW][COL], int row, int col);
void PlayerMove5(char board[FIVE_X][FIVE_Y], int row, int col);
void Player2Move5(char board[FIVE_X][FIVE_Y], int row, int col);


//电脑下棋
void ComputerMove(char board[ROW][COL], int row, int col);

//输赢判断
char Iswin(char board[ROW][COL], int row, int col);
int isfull(char board[ROW][COL], int row, int col);
//"*"玩家赢
//"#"电脑赢
//"q"平局
//"c"继续


         #######################################################test1.c################################################################




//五子棋由于输赢判断的局限性和下棋实现的不便就没有完成。
#include"game1.h"
void menu()
{
	printf("**********************\n");
	printf("*****1.#子棋PLAY******\n");
	printf("**********************\n");
	printf("****2.#子棋玩家pk*****\n");
	printf("**********************\n");
	printf("****3.五子棋玩家pk****\n");
	printf("**********************\n");
	printf("****0.退出游戏EXIT****\n");
	printf("**********************\n");
}
//游戏1--三子棋人机
void game1()
{
	char ret = 0;
	char board[ROW][COL] = {0};
	//初始化(数组)棋盘
	InitBoard3(board, ROW, COL);
	printf("\n");
	//打印棋盘
	DisplayBoard3(board, ROW, COL);
	printf("\n");
	//下棋的实现
	while (1)
	{
		//玩家下棋
		PlayerMove(board, ROW, COL);
		printf("\n");
		DisplayBoard3(board, ROW, COL);
        printf("\n");
		//判断输赢
		ret = Iswin(board,ROW,COL);
		if (ret != 'c')
		{
			break;
		}

		//电脑下棋
		ComputerMove(board, ROW, COL);
		printf("\n");
		DisplayBoard3(board, ROW, COL);
		printf("\n");
		//判断输赢
		ret = Iswin(board, ROW, COL);
		if (ret != 'c')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢！！\n");
	}
	else if(ret == '#')
	{
		printf("电脑赢！！\n");
	}
	else
	{
		printf("   —平局—\n");
	}
}

//游戏2--三子棋玩家pk
void game2()
{
	char ret = 0;
	char board[ROW][COL] = { 0 };
	//初始化(数组)棋盘
	InitBoard3(board, ROW, COL);
	printf("\n");
	//打印棋盘
	DisplayBoard3(board, ROW, COL);
	printf("\n");
	//下棋的实现
	while (1)
	{
		//玩家1下棋
		PlayerMove(board, ROW, COL);
		printf("\n");
		DisplayBoard3(board, ROW, COL);
		printf("\n");
		//判断输赢
		ret = Iswin(board, ROW, COL);
		if (ret != 'c')
		{
			break;
		}

		//玩家2下棋
		Player2Move(board, ROW, COL);
		printf("\n");
		DisplayBoard3(board, ROW, COL);
		printf("\n");
		//判断输赢
		ret = Iswin(board, ROW, COL);
		if (ret != 'c')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家1赢！！\n");
	}
	else if (ret == '#')
	{
		printf("玩家2赢！！\n");
	}
	else
	{
		printf("   —平局—\n");
	}
}

//游戏3--五子棋玩家pk
void game3()
{
	char ret = 0;
	char board[FIVE_X][FIVE_Y] = { 0 };
	//初始化(数组)棋盘
	InitBoard5(board, FIVE_X, FIVE_Y);
	printf("\n");
	//打印棋盘
	DisplayBoard5(board, FIVE_X, FIVE_Y);
	printf("\n");
	//下棋的实现
	while (1)
	{
		//玩家1下棋
		PlayerMove5(board, FIVE_X, FIVE_Y);
		printf("\n");
		DisplayBoard5(board, FIVE_X, FIVE_Y);
		printf("\n");
		//判断输赢
		ret = Iswin(board, FIVE_X, FIVE_Y);
		if (ret != 'c')
		{
			break;
		}

		//玩家2下棋
		Player2Move5(board, FIVE_X, FIVE_Y);
		printf("\n");
		DisplayBoard5(board, FIVE_X, FIVE_Y);
		printf("\n");
		//判断输赢
		ret = Iswin(board, FIVE_X, FIVE_Y);
		if (ret != 'c')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢！！\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢！！\n");
	}
	else
	{
		printf("   —平局—\n");
	}
}

void test()
{
	int input = 0;
	//时间计数随机变量
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		int a = 3;
		int b = 4;
		int c = 5;
		printf("请选择：>");
		scanf("%d", &input);
		switch (input)
		{
		
		//三子棋
		case 1:
			game1();
			break;
		case 2:
			game2();
			break;
		case 0:
			printf("退出游戏\n");
			break;

		//五子棋
		case 3:
			game3();
			break;
		/*case 4:
			game();
			break;
		case 5:
			printf("退出游戏\n");
			break;
		default:*/
			printf("选择错误，请重新选择！\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}



            #######################################################game1.c################################################################

//五子棋由于输赢判断的局限性和下棋实现的不便就没有完成。

#include"game1.h"

//棋盘宫格3
void InitBoard3(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

//棋盘初始化3
void DisplayBoard3(char board[ROW][COL], int row, int col)
{
	//方法1
	int i = 0;
	/*printf("---------- \n");
	printf("|   |   |   |\n");
	printf("|---|---|---|\n");
	printf("|   |   |   |\n");
	printf("|---|---|---|\n");
	printf("|   |   |   |\n");
	printf(" ----------- \n");*/
	//方法2
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1 )
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}
}

//宫格初始化5
void InitBoard5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

//棋盘初始化5
void DisplayBoard5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}
}


//下棋实现

//三子棋--玩家1下棋
void PlayerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家1下棋:>>>\n");
	while (1)
	{ 
		printf("请输入要下的坐标:>>>");
		scanf("%d%d", &x, &y);
		//坐标判断
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("已经下过棋了\n");
			}
		}
		else
		{
			printf("坐标错误请重新输入！\n");
			break;
		}
	}
	
}
//三子棋--玩家2下棋
void Player2Move(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家2下棋:>>>\n");
	while (1)
	{
		printf("请输入要下的坐标:>>>");
		scanf("%d%d", &x, &y);
		//坐标判断
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '#';
				break;
			}
			else
			{
				printf("已经下过棋了\n");
			}
		}
		else
		{
			printf("坐标错误请重新输入！\n");
			break;
		}
	}

}

//五子棋--玩家1下棋
void PlayerMove5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家1下棋:>>>\n");
	while (1)
	{
		printf("请输入要下的坐标:>>>");
		scanf("%d%d", &x, &y);
		//坐标判断
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("已经下过棋了\n");
			}
		}
		else
		{
			printf("坐标错误请重新输入！\n");
			break;
		}
	}

}
//五子棋--玩家2下棋
void Player2Move5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家2下棋:>>>\n");
	while (1)
	{
		printf("请输入要下的坐标:>>>");
		scanf("%d%d", &x, &y);
		//坐标判断
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '#';
				break;
			}
			else
			{
				printf("已经下过棋了\n");
			}
		}
		else
		{
			printf("坐标错误请重新输入！\n");
			break;
		}
	}

}


//电脑下棋
void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑下棋:>>>\n");
	
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}

//判断棋局结束
int isfull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}
		}
		
	}
	return 1;
}

//输赢判断三子棋
char Iswin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	//横三行
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		{
			return board[i][1];
		}
	}
	//竖三列
	for (j = 0; j < col; j++)
	{
		if (board[0][j] == board[1][j] && board[1][j] == board[2][j] && board[1][j] != ' ')
		{
			return board[1][j];
		}
	}
	// '\'方向判断
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}

	// '/'方向判断
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
	{
		return board[1][1];
	}

	//平局判断
	if (1 == isfull(board, ROW, COL))
	{
		return 'q';
	}
	return 'c';
}


//判断棋局结束
int isfull5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}
		}

	}
	return 1;
}

//输赢判断五子棋
char Iswin5(char board[FIVE_X][FIVE_Y], int row, int col)
{
	int i = 0;
	int j = 0;
	//横16行
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		{
			return board[i][1];
		}
	}
	//竖16列
	for (j = 0; j < col; j++)
	{
		if (board[0][j] == board[1][j] && board[1][j] == board[2][j] && board[1][j] != ' ')
		{
			return board[1][j];
		}
	}
	// '\'方向判断
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}

	// '/'方向判断
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
	{
		return board[1][1];
	}

	//平局判断
	if (1 == isfull5(board, FIVE_X, FIVE_Y))
	{
		return 'q';
	}
	return 'c';
}



              
